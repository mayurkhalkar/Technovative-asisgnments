import pandas as pd
import numpy as np

# Sample dataframe
data = {
    'col1': [1, 2, 3],
    'col2': ['a', 'b', 'c'],
    'col3': [{'key1': 'value1'}, {'key2': 'value2'}, {'key3': 'value3'}]
}

df = pd.DataFrame(data)

# Function to convert list/dict to string
def convert_to_string(value):
    if isinstance(value, (list, dict)):
        return str(value)
    return value

# Iterate through columns and update datatype
for column in df.columns:
    df[column] = df[column].apply(convert_to_string)

# Check datatype of columns
print(df.dtypes)
__________""""__________++++


import pandas as pd

# Sample dataframe
data = {
    'col1': [1, 2, 3],
    'col2': ['a', 'b', 'c'],
    'col3': [{'key1': 'value1'}, {'key2': 'value2'}, {'key3': 'value3'}]
}

df = pd.DataFrame(data)

# Convert object columns to string
object_columns = df.select_dtypes(include=['object']).columns
df[object_columns] = df[object_columns].astype(str)

# Check datatype of columns after conversion
print(df.dtypes)




=============
# Access data in converted string type columns
print(df['col2'][0])  # Accessing data in column 'col2' at index 0
print(df['col3'][1])  # Accessing data in column 'col3' at index 1



=======
import pandas as pd

# Sample dataframe
data = {
    'col1': [1, 2, 3],
    'col2': ['a', 'b', 'c'],
    'col3': [{'key1': 'value1'}, {'key2': 'value2'}, {'key3': 'value3'}]
}

df = pd.DataFrame(data)

# Convert object columns to string
object_columns = df.select_dtypes(include=['object']).columns
for col in object_columns:
    new_col_name = col + '_string'
    df[new_col_name] = df[col].astype(str)

# Access each column using the new string columns
print(df['col2_string'])  # Accessing data in the new column 'col2_string'
print(df['col3_string'])  # Accessing data in the new column 'col3_string'


